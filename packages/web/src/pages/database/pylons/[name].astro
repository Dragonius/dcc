---
import * as DcsJs from "../../../../../libs/dcsjs/src";
import Layout from "../../../layouts/database.astro";
import LabelValue from "../../../components/LabelValue.astro";
import { GetStaticPaths } from "astro";
import { escapeRegExp } from "../../../lib/utils";

export const getStaticPaths = (() => {
	const aircraftList: {
		params: { name: string };
		props: {
			pylon: DcsJs.Launcher;
			weapon?: DcsJs.Weapon;
			usedBy: DcsJs.AircraftDefinition[];
		};
	}[] = [];

	const pylons = DcsJs.launchers;
	const weapons = DcsJs.weapons;
	const aircrafts = Object.values(DcsJs.aircraftDefinitions);

	for (const pylon of Object.values(pylons)) {
		const weapon = pylon.type === "Weapon" ? (weapons[pylon.weapon] as DcsJs.Weapon) : undefined;
		aircraftList.push({
			params: {
				name: escapeRegExp(pylon.name),
			},
			props: {
				pylon,
				weapon,
				usedBy: aircrafts.filter((aircraft) => {
					return aircraft.loadouts.some((lo) => lo.pylons.some((pylon) => pylon.CLSID === pylon.CLSID));
				}),
			},
		});
	}
	return aircraftList;
}) satisfies GetStaticPaths;

const { pylon, weapon, usedBy } = Astro.props;
---

<Layout>
	<h1 class="mb-10 text-4xl">{pylon.displayName}</h1>
	<dl class="grid grid-cols-4 gap-10">
		<LabelValue label="Type" value={pylon.type} />
		{pylon.total > 1 ? <LabelValue label="Quantity" value={pylon.total} /> : null}
	</dl>
	{
		weapon == null ? null : (
			<div class="mt-10">
				<h2 class="text-2xl">Weapon</h2>
				<a href={`/database/weapons/${weapon.name}`} class="mt-2 block hover:underline">
					{weapon.displayName}
				</a>
			</div>
		)
	}
	{
		(
			<div class="mt-10">
				<h2 class="text-2xl">Used by</h2>
				{usedBy.map((aircraft) => {
					return (
						<a href={`/database/aircrafts/${aircraft.name}`} class="mt-2 block hover:underline">
							{aircraft.display_name}
						</a>
					);
				})}
			</div>
		)
	}
</Layout>
