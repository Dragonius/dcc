---
import * as DcsJs from "../../../../../libs/dcsjs/src";
import Layout from "../../../layouts/database.astro";
import LabelValue from "../../../components/LabelValue.astro";
import { GetStaticPaths } from "astro";
import { escapeRegExp } from "../../../lib/utils";

function isA2a(weapon: DcsJs.Weapon): weapon is DcsJs.A2AWeapon {
	return weapon.type in DcsJs.a2aWeaponType.Values;
}

function isA2gRange(weapon: DcsJs.Weapon): weapon is DcsJs.A2GRangeWeapon {
	return weapon.type in DcsJs.a2gRangeWeaponType.Values;
}

function isA2g(weapon: DcsJs.Weapon): weapon is DcsJs.A2GWeapon {
	return weapon.type in DcsJs.a2gWeaponType.Values;
}

export const getStaticPaths = (() => {
	const aircraftList: {
		params: { name: string };
		props: {
			weapon: DcsJs.Weapon;
			usedBy: DcsJs.AircraftDefinition[];
		};
	}[] = [];

	const pylons = DcsJs.launchers;
	const weapons = DcsJs.weapons;
	const aircrafts = Object.values(DcsJs.aircraftDefinitions);

	for (const weapon of Object.values(weapons)) {
		const usedByPylons = Object.values(pylons).filter(
			(pylon) => pylon.type === "Weapon" && pylon.weapon === weapon.name,
		);

		aircraftList.push({
			params: {
				name: escapeRegExp(weapon.name),
			},
			props: {
				weapon,
				usedBy: aircrafts.filter((aircraft) => {
					return aircraft.loadouts.some((lo) =>
						lo.pylons.some((pylon) => usedByPylons.some((ubp) => pylon.CLSID === ubp.CLSID)),
					);
				}),
			},
		});
	}
	return aircraftList;
}) satisfies GetStaticPaths;

const { weapon, usedBy } = Astro.props;
---

<Layout
	description={`${weapon.name} Weapon Definition for Digital Crew Chief(DCC)`}
	keywords={`Weapon, ${weapon.name}`}
>
	<h1 class="mb-10 text-4xl">{weapon.displayName}</h1>
	<dl class="grid grid-cols-2 gap-10 sm:grid-cols-4">
		<LabelValue label="Type" value={weapon.type} />
		<LabelValue label="Year" value={weapon.year} defaultValue="-" />
		{
			isA2a(weapon) ? (
				<>
					<LabelValue label="Range" value={weapon.rangeType} />
					<LabelValue label="Range" value={weapon.range} unit="nm" multiplier={0.0005} />
				</>
			) : isA2gRange(weapon) ? (
				<>
					<LabelValue label="Range" value={weapon.range} unit="m" />
					<LabelValue label="Targets" value={weapon.targets.join(", ")} />
				</>
			) : (
				<>
					<LabelValue label="Targets" value={weapon.target} />
					<LabelValue label="Weight" value={weapon.weight} unit="kg" defaultValue="-" />
					<LabelValue label="High Drag" value={weapon.highDrag} defaultValue="No" />
				</>
			)
		}
	</dl>
	{
		(
			<div class="mt-10">
				<h2 class="text-2xl">Used by</h2>
				<table>
					<tbody>
						{usedBy.map((aircraft) => {
							return (
								<tr class=" hover:bg-neutral-900">
									<td class="min-w-36">
										<a href={`/database/aircrafts/${aircraft.name}`} class="block p-2 text-primary-light underline">
											{aircraft.display_name}
										</a>
									</td>
								</tr>
							);
						})}
					</tbody>
				</table>
			</div>
		)
	}
</Layout>
