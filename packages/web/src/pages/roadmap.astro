---
import Layout from "../layouts/main.astro";

type Milestone = {
  title: string;
  id: number;
};

type Issue = {
  title: string;
  milestone?: Milestone;
  state: string;
};

type Error = {
  message: string;
  errors: any;
};

const openIssues: Issue[] = [];
const closedIssues: Issue[] = [];

const response = await fetch(
  "https://api.github.com/repos/Kilcekru/dcc/issues?state=all&milestone=3",
);

console.log("Status", response.status);
console.log("Status Text", response.statusText);
console.log("Ok", response.ok);
console.log("Text", await response.text());

if (!response.ok) throw new Error(response.statusText);

try {
  const issues = (await response.json()) as Issue[] | Error;

  if ("message" in issues) {
    console.error(issues);
    throw new Error(issues.message);
  }

  for (const issue of issues) {
    if (issue.state === "open") {
      openIssues.push(issue);
    } else {
      closedIssues.push(issue);
    }
  }
} catch (error) {
  console.error(error);
}
---

<Layout>
  <h1>Roadmap</h1>
  <div class="bg-secondary relative h-4 w-full overflow-hidden rounded-full">
    <div
      class="bg-primary h-full w-full flex-1 transition-all"
      style={{ transform: `translateX(-${100 - (20 || 0)}%)` }}
    >
    </div>
  </div>
  <div class="grid grid-cols-2">
    <div>
      {
        openIssues.map((issue) => (
          <p>
            {issue.title}({issue.state})
          </p>
        ))
      }
    </div>
    <div>
      {
        closedIssues.map((issue) => (
          <p>
            {issue.title}({issue.state})
          </p>
        ))
      }
    </div>
  </div>
</Layout>
