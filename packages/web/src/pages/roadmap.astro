---
export const prerender = false;

import Layout from "../layouts/mx.astro";
import { Github } from "../github-types";
import { formatDate } from "../../../shared/utils/src/format";
import IssueCard from "../components/IssueCard.astro";
import IssueList from "../components/IssueList.astro";

type Error = {
	message: string;
	errors: any;
};

const openIssues: Github.Issue[] = [];
const closedIssues: Github.Issue[] = [];

const response = await fetch("https://api.github.com/repos/Kilcekru/dcc/issues?state=all&milestone=3", {
	headers: {
		"User-Agent": "DCC-Web",
		Accept: "application/vnd.github+json",
		"X-GitHub-Api-Version": "2022-11-28",
	},
});

if (!response.ok) {
	console.error("Status", response.status);
	console.error("Status Text", response.statusText);
	console.error("Text", await response.text());
	throw new Error(response.statusText);
}

try {
	const issues = (await response.json()) as Github.Issue[] | Error;

	if ("message" in issues) {
		console.error(issues);
		throw new Error(issues.message);
	}

	for (const issue of issues) {
		if (issue.state === "open") {
			openIssues.push(issue);
		} else {
			closedIssues.push(issue);
		}
	}
} catch (error) {
	console.error(error);
}

const totalCount = openIssues.length + closedIssues.length;
const progess = (closedIssues.length / totalCount) * 100;

const releaseDate = new Date();
releaseDate.setDate(releaseDate.getDate() + Math.round(openIssues.length / 3) * 7);
---

<Layout>
	<div class="mt-10 flex items-center justify-center">
		<h2
			class="inline-block h-24 bg-gradient-to-r from-primary via-secondary to-primary bg-clip-text text-6xl text-transparent"
		>
			Road to v0.5
		</h2>
	</div>
	<div class="relative mx-10 mt-6 h-4 overflow-hidden rounded-full border border-neutral-700 bg-neutral-800">
		<div
			class="h-full w-full flex-1 bg-white transition-all"
			style={{ transform: `translateX(-${100 - (progess || 0)}%)` }}
		>
		</div>
	</div>
	<div class="mx-10 mt-2 flex justify-end">
		<p>Estimated Release: {formatDate(releaseDate)}</p>
	</div>
	<div class="grid grid-cols-2 gap-10 p-10">
		<IssueList title="Open Issues">
			{openIssues.map((issue) => <IssueCard issue={issue} />)}
		</IssueList>
		<IssueList title="Closed Issues">
			{closedIssues.map((issue) => <IssueCard issue={issue} />)}
		</IssueList>
	</div>
</Layout>
